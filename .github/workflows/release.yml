name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build_frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "yarn"
          cache-dependency-path: skynet/frontend/yarn.lock
      - name: Build assets
        shell: bash
        run: |
          make static
      - uses: actions/upload-artifact@v4
        with:
          name: frontend
          path: bin/assets
          retention-days: 1

  build_skynet:
    needs: build_frontend
    name: Build skynet ${{ matrix.platform.os_name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - os_name: linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            name: skynet-linux-x86_64.tar.gz
          - os_name: linux-i686
            os: ubuntu-20.04
            target: i686-unknown-linux-gnu
            name: skynet-linux-i686.tar.gz
          - os_name: linux-aarch64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            name: skynet-linux-aarch64.tar.gz
          - os_name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            name: skynet-windows-x86_64.zip
          - os_name: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            name: skynet-darwin-x86_64.tar.gz
          - os_name: macOS-aarch64
            os: macOS-latest
            target: aarch64-apple-darwin
            name: skynet-darwin-aarch64.tar.gz
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo & target directories
        uses: Swatinem/rust-cache@v2
      - uses: ilammy/setup-nasm@v1
        if: ${{ matrix.platform.os == 'windows-latest'}}
      - name: Install Protoc
        id: protoc-install
        uses: arduino/setup-protoc@v3
        with:
          version: "27.3"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set protoc path
        shell: bash
        run: |
          echo "${{ steps.protoc-install.outputs.path }}" >> $GITHUB_PATH
      - name: Update gcc
        if: ${{ matrix.platform.os == 'ubuntu-20.04'}}
        shell: bash
        run: |
          echo "CC=gcc-10" >> $GITHUB_ENV
          echo "CXX=g++-10" >> $GITHUB_ENV
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "both"
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: false
      - uses: actions/download-artifact@v4
        with:
          name: frontend
          path: bin/assets
      - name: Package as archive
        shell: bash
        run: |
          make output BUILD_TYPE=release TARGET_DIR=$(pwd)/target/${{ matrix.platform.target }}/release
          mkdir release
          mv bin release/skynet
          cd release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a ../${{ matrix.platform.name }} skynet
          else
            tar czvf ../${{ matrix.platform.name }} skynet
          fi
          cd -
      - uses: actions/upload-artifact@v4
        with:
          name: skynet-${{ matrix.platform.os_name }}
          path: ${{ matrix.platform.name }}
          retention-days: 1
      - name: Generate SHA-256
        run: shasum -a 256 ${{ matrix.platform.name }} > ${{ matrix.platform.name }}.sha256
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: ${{ matrix.platform.name }}*
  publish_crate:
    needs: build_skynet
    name: Publish crate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login
        run: cargo login ${{ secrets.CRATES_IO_TOKEN }}
      - name: Push to crate.io
        run: |
          cd skynet_macro
          cargo publish --no-verify || true
          cd -
          cd skynet_api
          cargo publish --no-verify || true
          cd -
  push_dockerhub:
    needs: build_skynet
    name: Push to dockerhub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: imwxz/skynet
      - uses: actions/download-artifact@v4
        with:
          path: release
          pattern: skynet-linux-*
          merge-multiple: true
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - run: |
          cd release
          tar xzvf skynet-linux-x86_64.tar.gz
          mv skynet amd64
          tar xzvf skynet-linux-aarch64.tar.gz
          mv skynet arm64
          cd -
      - name: Build and push aarch64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
