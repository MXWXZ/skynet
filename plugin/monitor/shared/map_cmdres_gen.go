// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package shared

import (
	"sort"
	"sync"

	"github.com/google/uuid"
)

type CMDResElement struct {
	Key   uuid.UUID
	Value *CMDRes
}

type CMDResSorterFunc func(a *CMDResElement, b *CMDResElement) bool

type CMDResMap struct {
	Data sync.Map
}

func (m *CMDResMap) Clear() {
	m.Data = sync.Map{}
}

func (m *CMDResMap) Len() int {
	return len(m.Keys())
}

func (m *CMDResMap) Get(k uuid.UUID) (*CMDRes, bool) {
	ret, ok := m.Data.Load(k)
	if ret == nil {
		return nil, false
	}
	return ret.(*CMDRes), ok
}

func (m *CMDResMap) MustGet(k uuid.UUID) *CMDRes {
	ret, ok := m.Get(k)
	if !ok {
		panic("key not found")
	}
	return ret
}

func (m *CMDResMap) Set(k uuid.UUID, v *CMDRes) {
	m.Data.Store(k, v)
}

func (m *CMDResMap) SetIfAbsent(k uuid.UUID, v *CMDRes) (*CMDRes, bool) {
	ret, ok := m.Data.LoadOrStore(k, v)
	if ret == nil {
		panic("value is nil")
	}
	return ret.(*CMDRes), ok
}

func (m *CMDResMap) Delete(k uuid.UUID) {
	m.Data.Delete(k)
}

func (m *CMDResMap) Has(k uuid.UUID) bool {
	_, ok := m.Data.Load(k)
	return ok
}

func (m *CMDResMap) Range(f func(k uuid.UUID, v *CMDRes) bool) {
	m.Data.Range(func(key, value interface{}) bool {
		return f(key.(uuid.UUID), value.(*CMDRes))
	})
}

func (m *CMDResMap) Keys() []uuid.UUID {
	var ret []uuid.UUID
	m.Range(func(key uuid.UUID, value *CMDRes) bool {
		ret = append(ret, key)
		return true
	})
	return ret
}

func (m *CMDResMap) Values() []*CMDRes {
	var ret []*CMDRes
	m.Range(func(key uuid.UUID, value *CMDRes) bool {
		ret = append(ret, value)
		return true
	})
	return ret
}

func (m *CMDResMap) Elements() []*CMDResElement {
	var ret []*CMDResElement
	m.Range(func(key uuid.UUID, value *CMDRes) bool {
		ret = append(ret, &CMDResElement{
			Key:   key,
			Value: value,
		})
		return true
	})
	return ret
}

func (m *CMDResMap) Map() map[uuid.UUID]*CMDRes {
	ret := make(map[uuid.UUID]*CMDRes)
	m.Range(func(key uuid.UUID, value *CMDRes) bool {
		ret[key] = value
		return true
	})
	return ret
}

func (m *CMDResMap) SortElement(f CMDResSorterFunc) []*CMDResElement {
	ret := m.Elements()
	sort.SliceStable(ret, func(i, j int) bool {
		return f(ret[i], ret[j])
	})
	return ret
}

func (m *CMDResMap) SortKey(f CMDResSorterFunc) []uuid.UUID {
	res := m.SortElement(f)
	var ret []uuid.UUID
	for _, v := range res {
		ret = append(ret, v.Key)
	}
	return ret
}

func (m *CMDResMap) SortValue(f CMDResSorterFunc) []*CMDRes {
	res := m.SortElement(f)
	var ret []*CMDRes
	for _, v := range res {
		ret = append(ret, v.Value)
	}
	return ret
}
