{{define "content"}}
<div class="container-fluid">
  <div class="card card-primary">
    <div class="card-header">
      <h3 class="card-title">Agent Status</h3>
    </div>
    <div class="card-body">
      <table class="table table-bordered">
        <thead>
          <tr>
            <th class="th-50">ID</th>
            <th>Name</th>
            <th class="th-70">Status</th>
            <th class="th-100">IP</th>
            <th class="th-120">Online Time</th>
            <th class="th-50">Load1</th>
            <th class="th-150">Net ↑|↓</th>
            <th class="th-170">Band ↑|↓</th>
            <th class="th-70">CPU</th>
            <th class="th-70">Mem</th>
            <th class="th-70">Disk</th>
            <th class="th-70">Latency</th>
          </tr>
        </thead>
        <tbody id="agent">
        </tbody>
      </table>
    </div>
    <div class="card-footer clearfix">
      <ul data-page="agent" data-total="{{ ._total }}"
        class="pagination pagination-sm m-0 d-flex justify-content-center">
      </ul>
    </div>
  </div>
</div>
{{end}}

{{define "js"}}
<script nonce="{{ ._nonce }}">
  "use strict"

  const ParseData = (d) => {
    return `
      <tr data-widget="expandable-table" aria-expanded="false">
        <td>${d.ID}</td>
        <td>${d.Name}</td>
        <td id="agent_' + d.ID + '_status">${d.Online ? '<span class="badge bg-success">ONLINE</span></td>' :
        '<span class="badge bg-secondary">OFFLINE</span>'}</td>
        <td>${d.IP}</td>
        <td id="agent_${d.ID}_onlinetime">${d.Online ? new Date(d.LastLogin).TimeSince() : ''}</td>
        <td id="agent_${d.ID}_load1">${d.Online ? d.Load1 : ''}</td>
        <td id="agent_${d.ID}_net">${d.Online ? SizeString(d.NetUp, 1) + " | " + SizeString(d.NetDown, 1) : ''}</td>
        <td id="agent_${d.ID}_band">${d.Online ? SizeString(d.BandUp, 1) + " | " + SizeString(d.BandDown, 1) : ''}</td>
        <td id="agent_${d.ID}_cpu">${d.Online ? d.CPU.toFixed(1) + "%" : ''}</td>
        <td id="agent_${d.ID}_mem">${d.Online ? (d.Mem * 100 / d.TotalMem).toFixed(1) + "%" : ''}</td>
        <td id="agent_${d.ID}_disk">${d.Online ? (d.Disk * 100 / d.TotalDisk).toFixed(1) + "%" : ''}</td>
        <td id="agent_${d.ID}_latency">${d.Online ? d.Latency + " ms" : ''}</td>
      </tr>
      <tr class="expandable-body d-none">
        <td colspan="12">
          <div class="row mt-0 pt-0 mb-0 pb-0">
            <div class="col-sm">
              <p class="mt-1 pt-0 mb-0 pb-0">Hostname: ${d.HostName}</p>
              <p class="mt-1 pt-0 mb-0 pb-0">System: ${d.System}</p>
              <p class="mt-1 pt-0 mb-0 pb-0">Machine: ${d.Machine}</p>
              <p class="mt-1 pt-0 mb-1 pb-0">Last Connect: ${new Date(d.LastLogin).Format("yyyy-MM-dd hh:mm:ss")}</p>
            </div>
            <div class="col-sm">
              <p id="agent_${d.ID}_d_mem" class="mt-1 pt-0 mb-0 pb-0">Memory: ${d.Online ? SizeString(d.Mem, 1) + " / " + SizeString(d.TotalMem, 1) : ''}</p>
              <p id="agent_${d.ID}_d_disk" class="mt-1 pt-0 mb-0 pb-0">Disk: ${d.Online ? SizeString(d.Disk, 1) + " / " + SizeString(d.TotalDisk, 1) : ''}</p>
              <p id="agent_${d.ID}_d_update" class="mt-1 pt-0 mb-1 pb-0">Last Update: ${d.Online ? new Date(d.LastRsp).TimeSince() : ''}</p>
            </div>
          </div>
        </td>
      </tr>
    `;
  };

  const ParseFunc = (obj, page, size) => {
    JSONGet(`/api/plugin/2eb2e1a5-66b4-45f9-ad24-3c4f05c858aa/agent?page=${page}&size=${size}`).done((e) => {
      if (UpdateTotal("agent", e.total, ParseFunc))
        return;
      if (JSON.stringify(e.data) !== JSON.stringify(obj.data)) {
        $("#agent").empty();
        $.each(e.data, function (_, e) {
          $("#agent").append(ParseData(e));
        });
        obj.data = e.data;
      }
    })
  };
  ParsePage("agent", 10, [5, 10, 20, 50], ParseFunc, 0);

  function updateTable(r) {
    $('#agent_' + r.ID + '_status').empty();
    if (r.Online) {
      $('#agent_' + r.ID + '_status').append('<span class="badge bg-success">ONLINE</span>');
      $('#agent_' + r.ID + '_onlinetime').text(new Date(r.LastLogin).TimeSince());
      $('#agent_' + r.ID + '_load1').text(r.Load1);
      $('#agent_' + r.ID + '_net').text(SizeString(r.NetUp, 1) + " | " + SizeString(r.NetDown, 1));
      $('#agent_' + r.ID + '_band').text(SizeString(r.BandUp, 1) + " | " + SizeString(r.BandDown, 1));
      $('#agent_' + r.ID + '_cpu').text(r.CPU.toFixed(1) + "%");
      $('#agent_' + r.ID + '_mem').text((r.Mem * 100 / r.TotalMem).toFixed(1) + "%");
      $('#agent_' + r.ID + '_disk').text((r.Disk * 100 / r.TotalDisk).toFixed(1) + "%");
      $('#agent_' + r.ID + '_latency').text(r.Latency + " ms");
      $('#agent_' + r.ID + '_d_mem').text("Memory: " + SizeString(r.Mem, 1) + " / " + SizeString(r.TotalMem, 1));
      $('#agent_' + r.ID + '_d_disk').text("Disk: " + SizeString(r.Disk, 1) + " / " + SizeString(r.TotalDisk, 1));
      $('#agent_' + r.ID + '_d_update').text("Last Update: " + new Date(r.LastRsp).TimeSince());
    } else {
      $('#agent_' + r.ID + '_status').append('<span class="badge bg-secondary">OFFLINE</span>');
      $('#agent_' + r.ID + '_onlinetime').empty();
      $('#agent_' + r.ID + '_load1').empty();
      $('#agent_' + r.ID + '_net').empty();
      $('#agent_' + r.ID + '_band').empty();
      $('#agent_' + r.ID + '_cpu').empty();
      $('#agent_' + r.ID + '_mem').empty();
      $('#agent_' + r.ID + '_disk').empty();
      $('#agent_' + r.ID + '_latency').empty();
      $('#agent_' + r.ID + '_d_mem').text("Memory: ");
      $('#agent_' + r.ID + '_d_disk').text("Disk: ");
      $('#agent_' + r.ID + '_d_update').text("Last Update: ");
    }
  }

  let props = _page_status["agent"];
  function update() {
    JSONGet(`/api/plugin/2eb2e1a5-66b4-45f9-ad24-3c4f05c858aa/agent?page=${props.page}&size=${props.size}`).done((e) => {
      $.each(e.data, function (_, e) {
        updateTable(e);
      });
    });
  }

  update();
  setInterval(update, 1000);
</script>
{{end}}