{{define "content"}}
<div class="container-fluid">
  <div class="card card-success">
    <div class="card-header">
      <h3 class="card-title">Agent Status</h3>
    </div>
    <div class="card-body">
      <table class="table table-bordered">
        <thead>
          <tr>
            <th class="th-50">ID</th>
            <th>Name</th>
            <th class="th-70">Status</th>
            <th class="th-100">IP</th>
            <th class="th-120">Online Time</th>
            <th class="th-50">Load1</th>
            <th class="th-150">Net ↑|↓</th>
            <th class="th-170">Band ↑|↓</th>
            <th class="th-70">CPU</th>
            <th class="th-70">Mem</th>
            <th class="th-70">Disk</th>
            <th class="th-70">Latency</th>
          </tr>
        </thead>
        <tbody id="agents">
          {{range .agents}}
          <tr data-widget="expandable-table" aria-expanded="false">
            <td>{{ .ID }}</td>
            <td>{{ .Name }}</td>
            {{if .Online}}
            <td id="agent_{{ .ID }}_status"><span class="badge bg-success">ONLINE</span></td>
            {{else}}
            <td id="agent_{{ .ID }}_status"><span class="badge bg-secondary">OFFLINE</span></td>
            {{end}}
            <td>{{ .IP }}</td>
            <td id="agent_{{ .ID }}_onlinetime"></td>
            <td id="agent_{{ .ID }}_load1"></td>
            <td id="agent_{{ .ID }}_net"></td>
            <td id="agent_{{ .ID }}_band"></td>
            <td id="agent_{{ .ID }}_cpu"></td>
            <td id="agent_{{ .ID }}_mem"></td>
            <td id="agent_{{ .ID }}_disk"></td>
            <td id="agent_{{ .ID }}_latency"></td>
          </tr>
          <tr class="expandable-body d-none">
            <td colspan="12">
              <div class="row mt-0 pt-0 mb-0 pb-0">
                <div class="col-sm">
                  <p class="mt-1 pt-0 mb-0 pb-0">Hostname: {{ .HostName }}</p>
                  <p class="mt-1 pt-0 mb-0 pb-0">System: {{ .System }}</p>
                  <p class="mt-1 pt-0 mb-0 pb-0">Machine: {{ .Machine }}</p>
                  <p class="mt-1 pt-0 mb-1 pb-0">Last Connect: {{ time .LastLogin }}</p>
                </div>
                <div class="col-sm">
                  <p id="agent_{{ .ID }}_d_mem" class="mt-1 pt-0 mb-0 pb-0">Memory:</p>
                  <p id="agent_{{ .ID }}_d_disk" class="mt-1 pt-0 mb-0 pb-0">Disk:</p>
                  <p id="agent_{{ .ID }}_d_update" class="mt-1 pt-0 mb-1 pb-0">Last Update:</p>
                </div>
              </div>
            </td>
          </tr>
          {{end}}
        </tbody>
      </table>
    </div>
    <div class="card-footer clearfix">
      <ul class="pagination pagination-sm m-0 d-flex justify-content-center">
        {{range split ._page ._totpage}}
        {{if .Active}}
        <li class="page-item active"><a class="page-link" page="{{.Number}}">{{.Text}}</a></li>
        {{else}}
        {{if .Disabled}}
        <li class="page-item disabled"><a class="page-link" page="{{.Number}}">{{.Text}}</a></li>
        {{else}}
        <li class="page-item"><a class="page-link" page="{{.Number}}">{{.Text}}</a></li>
        {{end}}
        {{end}}
        {{end}}
        <li>
          <select class="form-control pagebtn">
            <option value="5">5 / page</option>
            <option value="10">10 / page</option>
            <option value="20">20 / page</option>
            <option value="50">50 / page</option>
          </select>
        </li>
      </ul>
    </div>
  </div>
</div>
{{end}}

{{define "js"}}
<script nonce="{{ ._nonce }}">
  "use strict"

  let sp = GetPageSize(10, [5, 10, 20, 50]);

  $(".pagebtn").on("change", function () {
    InsertParam("size", this.value)
  });

  $(".page-item").click((e) => {
    InsertParam("page", e.target.getAttribute("page"))
  })

  function updateTable(r) {
    $('#agent_' + r.ID + '_status').empty();
    if (r.Online) {
      $('#agent_' + r.ID + '_status').append('<span class="badge bg-success">ONLINE</span>');
      $('#agent_' + r.ID + '_onlinetime').text(TimeSince(new Date(r.LastLogin)));
      $('#agent_' + r.ID + '_load1').text(r.Load1);
      $('#agent_' + r.ID + '_net').text(SizeString(r.NetUp, 1) + " | " + SizeString(r.NetDown, 1));
      $('#agent_' + r.ID + '_band').text(SizeString(r.BandUp, 1) + " | " + SizeString(r.BandDown, 1));
      $('#agent_' + r.ID + '_cpu').text(r.CPU.toFixed(1) + "%");
      $('#agent_' + r.ID + '_mem').text((r.Mem * 100 / r.TotalMem).toFixed(1) + "%");
      $('#agent_' + r.ID + '_disk').text((r.Disk * 100 / r.TotalDisk).toFixed(1) + "%");
      $('#agent_' + r.ID + '_latency').text(r.Latency + " ms");
      $('#agent_' + r.ID + '_d_mem').text("Memory: " + SizeString(r.Mem, 1) + " / " + SizeString(r.TotalMem, 1));
      $('#agent_' + r.ID + '_d_disk').text("Disk: " + SizeString(r.Disk, 1) + " / " + SizeString(r.TotalDisk, 1));
      $('#agent_' + r.ID + '_d_update').text("Last Update: " + TimeSince(new Date(r.LastRsp)));
    } else {
      $('#agent_' + r.ID + '_status').append('<span class="badge bg-secondary">OFFLINE</span>');
      $('#agent_' + r.ID + '_onlinetime').empty();
      $('#agent_' + r.ID + '_load1').empty();
      $('#agent_' + r.ID + '_net').empty();
      $('#agent_' + r.ID + '_band').empty();
      $('#agent_' + r.ID + '_cpu').empty();
      $('#agent_' + r.ID + '_mem').empty();
      $('#agent_' + r.ID + '_disk').empty();
      $('#agent_' + r.ID + '_latency').empty();
      $('#agent_' + r.ID + '_d_mem').text("Memory: ");
      $('#agent_' + r.ID + '_d_disk').text("Disk: ");
      $('#agent_' + r.ID + '_d_update').text("Last Update: ");
    }
  }

  function update() {
    JSONGet("{{ api .agentAPI }}" + "?page=" + sp[0] + "&size=" + sp[1]).done((e) => {
      $.each(e.data, function (_, e) {
        updateTable(e);
      });
    });
  }

  update();
  setInterval(update, 1000);
</script>
{{end}}