// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package utils

import (
	"sort"
	"sync"
)

type StringElement struct {
	Key   string
	Value interface{}
}

type StringSorterFunc func(a *StringElement, b *StringElement) bool

type StringMap struct {
	Data sync.Map
}

func (m *StringMap) Clear() {
	m.Data = sync.Map{}
}

func (m *StringMap) Len() int {
	return len(m.Keys())
}

func (m *StringMap) Get(k string) (interface{}, bool) {
	ret, ok := m.Data.Load(k)
	if ret == nil {
		return nil, false
	}
	return ret.(interface{}), ok
}

func (m *StringMap) MustGet(k string) interface{} {
	ret, ok := m.Get(k)
	if !ok {
		panic("key not found")
	}
	return ret
}

func (m *StringMap) Set(k string, v interface{}) {
	m.Data.Store(k, v)
}

func (m *StringMap) SetIfAbsent(k string, v interface{}) (interface{}, bool) {
	ret, ok := m.Data.LoadOrStore(k, v)
	if ret == nil {
		panic("value is nil")
	}
	return ret.(interface{}), ok
}

func (m *StringMap) Delete(k string) {
	m.Data.Delete(k)
}

func (m *StringMap) Has(k string) bool {
	_, ok := m.Data.Load(k)
	return ok
}

func (m *StringMap) Range(f func(k string, v interface{}) bool) {
	m.Data.Range(func(key, value interface{}) bool {
		return f(key.(string), value.(interface{}))
	})
}

func (m *StringMap) Keys() []string {
	var ret []string
	m.Range(func(key string, value interface{}) bool {
		ret = append(ret, key)
		return true
	})
	return ret
}

func (m *StringMap) Values() []interface{} {
	var ret []interface{}
	m.Range(func(key string, value interface{}) bool {
		ret = append(ret, value)
		return true
	})
	return ret
}

func (m *StringMap) Elements() []*StringElement {
	var ret []*StringElement
	m.Range(func(key string, value interface{}) bool {
		ret = append(ret, &StringElement{
			Key:   key,
			Value: value,
		})
		return true
	})
	return ret
}

func (m *StringMap) Map() map[string]interface{} {
	ret := make(map[string]interface{})
	m.Range(func(key string, value interface{}) bool {
		ret[key] = value
		return true
	})
	return ret
}

func (m *StringMap) SortElement(f StringSorterFunc) []*StringElement {
	ret := m.Elements()
	sort.SliceStable(ret, func(i, j int) bool {
		return f(ret[i], ret[j])
	})
	return ret
}

func (m *StringMap) SortKey(f StringSorterFunc) []string {
	res := m.SortElement(f)
	var ret []string
	for _, v := range res {
		ret = append(ret, v.Key)
	}
	return ret
}

func (m *StringMap) SortValue(f StringSorterFunc) []interface{} {
	res := m.SortElement(f)
	var ret []interface{}
	for _, v := range res {
		ret = append(ret, v.Value)
	}
	return ret
}
