// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package utils

import (
	"sort"
	"sync"

	"github.com/google/uuid"
)

type UUIDElement struct {
	Key   uuid.UUID
	Value interface{}
}

type UUIDSorterFunc func(a *UUIDElement, b *UUIDElement) bool

type UUIDMap struct {
	Data   sync.Map
	length int
}

func (m *UUIDMap) Clear() {
	m.length = 0
	m.Data = sync.Map{}
}

func (m *UUIDMap) Len() int {
	return m.length
}

func (m *UUIDMap) Get(k uuid.UUID) (interface{}, bool) {
	ret, ok := m.Data.Load(k)
	if ret == nil {
		return nil, false
	}
	return ret.(interface{}), ok
}

func (m *UUIDMap) MustGet(k uuid.UUID) interface{} {
	ret, ok := m.Get(k)
	if !ok {
		panic("key not found")
	}
	return ret
}

func (m *UUIDMap) Set(k uuid.UUID, v interface{}) {
	if !m.Has(k) {
		m.length++
	}
	m.Data.Store(k, v)
}

func (m *UUIDMap) SetIfAbsent(k uuid.UUID, v interface{}) (interface{}, bool) {
	ret, ok := m.Data.LoadOrStore(k, v)
	if !ok {
		m.length++
	}
	if ret == nil {
		panic("key not found")
	}
	return ret.(interface{}), ok
}

func (m *UUIDMap) Delete(k uuid.UUID) {
	if m.Has(k) {
		m.length--
	}
	m.Data.Delete(k)
}

func (m *UUIDMap) Has(k uuid.UUID) bool {
	_, ok := m.Data.Load(k)
	return ok
}

func (m *UUIDMap) Range(f func(k uuid.UUID, v interface{}) bool) {
	m.Data.Range(func(key, value interface{}) bool {
		return f(key.(uuid.UUID), value.(interface{}))
	})
}

func (m *UUIDMap) Keys() []uuid.UUID {
	var ret []uuid.UUID
	m.Range(func(key uuid.UUID, value interface{}) bool {
		ret = append(ret, key)
		return true
	})
	return ret
}

func (m *UUIDMap) Values() []interface{} {
	var ret []interface{}
	m.Range(func(key uuid.UUID, value interface{}) bool {
		ret = append(ret, value)
		return true
	})
	return ret
}

func (m *UUIDMap) Elements() []*UUIDElement {
	var ret []*UUIDElement
	m.Range(func(key uuid.UUID, value interface{}) bool {
		ret = append(ret, &UUIDElement{
			Key:   key,
			Value: value,
		})
		return true
	})
	return ret
}

func (m *UUIDMap) Map() map[uuid.UUID]interface{} {
	ret := make(map[uuid.UUID]interface{})
	m.Range(func(key uuid.UUID, value interface{}) bool {
		ret[key] = value
		return true
	})
	return ret
}

func (m *UUIDMap) SortElement(f UUIDSorterFunc) []*UUIDElement {
	ret := m.Elements()
	sort.SliceStable(ret, func(i, j int) bool {
		return f(ret[i], ret[j])
	})
	return ret
}

func (m *UUIDMap) SortKey(f UUIDSorterFunc) []uuid.UUID {
	res := m.SortElement(f)
	var ret []uuid.UUID
	for _, v := range res {
		ret = append(ret, v.Key)
	}
	return ret
}

func (m *UUIDMap) SortValue(f UUIDSorterFunc) []interface{} {
	res := m.SortElement(f)
	var ret []interface{}
	for _, v := range res {
		ret = append(ret, v.Value)
	}
	return ret
}
